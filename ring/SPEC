=== Ring Spec (Working Version)

     ^--->HTTP Reqeust--->[Handler]--->Env1--->[Middleware]--->Env2----v
     |                                                                 |
  [Cient]                                                          [Endpoint]
     |                                                                 |
     ^----HTTP Response<--[Handler]<---Res2<---[Middleware]<---Res1<---v

== Overview
Ring is a web application library inspired by Python's WSGI and Ruby's Rack, 
designed to encourage modular and concise web applications.

Ring is defined in terms of Components, Handlers, Environments, and Responses, 
each of which are described below.


== Components
Ring components constitute the logic of the web application and are abstracted form the details of the HTTP protocol. 

They are implemented as Clojure functions that process a given environment to 
generate and return a response.

We call a component an 'endpoint' if it is meant to be used at the end of a 
component tree, i.e. it does not call any other components to generate it's 
response. We call a component 'middleware' if it invokes other components to 
generate its response. We can combine 1 or more endpoints and 0 or more 
middleware components to build a complete Ring 'app'. Such an app can then be 
run by a Ring handler.


== Handlers
A Ring handler is a server implementation than can 'run' apps. Handlers are 
responsible for implementing the HTTP protocol and abstracting the apps that 
they run from the details of the protocol.

Handlers are implemented as functions of two arguments, an options map and a 
Ring app. The options map provides any needed configuration to the handler, such 
as the port on which to run.

Once initialized, handlers receive HTTP requests, parse them to construct an 
environment, and then invoke their Ring app with the environment as an
argument. Once the app returns a response, the handler uses it to construct and 
send an HTTP response to the client.


== Environments
A Ring environment is a Clojure map containing at least the following keys and 
corresponding values:

:server-port
  (Required, Integer)
  The port on which the request is being handled.

:server-name
  (Required, String)
  The resolved server name, or the server IP address.

:remote-addr
  (Required, String)
  The IP address of the client or the last proxy that sent the request.

:uri
  (Required, String)
  The request URI. Must starts with "/".

:query-string
  (Optional, String)
  The query string. Must not be a blank string - if there is no query string
  must be nil.

:scheme
  (Required, String)
  A downcased String indicating the transport protocol, must be one of
  "http" or "https".

:request-method 
  (Required, Keyword) 
  The HTTP request method, must not be one of :get, :head, :options, :put, 
  :post, or :delete.

:headers
  (Required, IPersistentMap)
  A Clojure map of downcased header name Strings to corresponding header value 
  Strings.
  
:content-type
  (Optional, String)
  The MIME type of the request body, if known.

:content-length
  (Optional, Integer)
  The number of bytes in the request body, if known.

:character-encoding
  (Optional, String)
  The name of the character encoding used in the request body, if known.

:body
  (Optional, InputStream)
  An InputStream for the request body, if present.

If a component invokes another component with an environment containing 
additional keys, these keys must be namespaced using the Clojure 
:name.space/key-name convention. The ring.* namespaces are reserved.


== Responses
A Ring response is a Clojure map containing at least the following keys and corresponding values:

:status
  (Required, Integer)
  The HTTP status code. Must be greater than or equal to 100.

:headers
  (Required, IPersistentMap)
  A Clojure map of HTTP header names to header values. These values may be
  either Strings, in which case one name/value header will be sent in the
  HTTP response, or a seq of Strings, in which case a name/value header will be 
  sent for each such String value.

:body
  (Optional, {String, File, InputStream})
  A representation of the response body, if a response body is appropriate for 
  the response's status code. The respond body is handled according to its type:
  String:
    Contents are sent to the client as-is.
  File:
    Contents at the specified location are sent to the client. The server may 
    use an optimized method to send the file if such a method is available.
  InputStream:
    Contents are consumed from the stream and sent to the client. When the
    stream is exhausted, it is .close'd.

As with environments, keys other than those listed above should be appropriately
namespaced.


== Credit
This project borrows heavily from Ruby's Rack and Python's WSGI, and I thank the communities developing and supporting those projects.
