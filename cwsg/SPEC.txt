== Overview
[Web]--->HTTP Reqeust--->[Handler]--->Env1--->[Middleware]--->Env2----v
                                                                    [Endpoint]
[Web]<---HTTP Response<--[Handler]<---Res2<---[Middleware]<---Res1<---v

CWSG is a web application library inspired by Python WSGI and Ruby's Rack.
CWSG is defined in terms of Components, Handlers, Envs, Responses, each of which 
are described below.


== Components
Components are the logic of the web application, abstracted form the details of 
the HTTP protocol. 

They are implemented as functions that take an environment, process that 
environment to generate a response, and then return that response.

We call a component an 'endpoint' if it is meant to be at the end of a component 
tree, i.e. it does not call any other components to generate it's response. We 
call a component 'middleware' if it invokes another components to generate its 
response. We can combine 1 or more endpoints and 0 or more middleware components 
to build a complete 'app'. Such an app can then be run by a handler.


== Handlers
A handler is an server than can 'run' apps. They are responsible for 
implementing HTTP and abstracting the apps they run from the details of the 
protocol.

Handlers are implemented as functions of two arguments, an options map and a 
CWSG app. The options map provides any needed configuration to the handler, such 
as the port on which to run.

Once initialized, handlers receive HTTP requests, parse them to construct an 
environment, and then invoke the app they are running with the environment. The 
handler then uses the response returned by the app to construct an HTTP response 
and send it to the client.


== Environment
An environment is a Clojure map containing at least the following keys and corresponding values:

:cwsg/server-port
  (Required, Integer)
  The port on which the request is being handled.

:cwsg/server-name
  (Required, String)
  The resolved server name, or the server IP address.

:cwsg/remote-addr
  (Required, String)
  The IP address of the client or last proxy that sent the  request.

:cwsg/uri
  (Required, String)
  The request URI. Must starts with "/".

:cwsg/query-string
  (Optional, String)
  The query string. Must not be blank.

:cwsg/scheme
  (Required, String)
  A downcased String indicating the transport protocol.

:cwsg/request-method 
  (Required, Keyword) 
  The HTTP request method, must not be one of :get, :head, :options, :put, 
  :post, or :delete.

:cwsg/headers
  (Required, Map)
  A Clojure map of downcased header name Strings to corresponding header value 
  Strings.
  
:cwsg/content-type
  (Optional, String)
  The MIME type of the request body, if known.

:cwsg/content-length
  (Optional) <Integer>
  The number of bytes in the request body, if known.

:cwsg/character-encoding
  (Optional, String)
  The name of the character encoding used in the request body, if known.

:cwsg/body
  (Optional, InputStream)
  An InputStream for the request body, if present.

If a component invokes another component with an environment containing additional keys, these keys must be namespaced using the Clojure :name.space/key-name convention.


== Response
An response is a Clojure map containing at least the following keys and corresponding values:

:cwsg/status
  (Required, Integer)
  The HTTP status code.

:cwsg/headers
  (Required, Map)
  A Clojure map of HTTP header names to header values. These values may be
  either Strings, in which case one name/value header will be sent in the
  HTTP response, or a seq of Strings, in which a name/value header will be sent
  for each such String value.

:cwsg/body
  (Optional, InputStream)
  An InputStream for the response body, if and only if a response body is
  appropriate for the response's status code.

As with environments, if a component includes keys other than the above in a returned response, they must be in the responder's namespace.


== Credit
This project borrows heavily from Ruby's Rack and Python's WSGI, and I thank the communities supporting those projects.