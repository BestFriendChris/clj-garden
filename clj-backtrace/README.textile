h3. clj-backtrace: more readable backtraces for Clojure

clj-backtrace provides utilities for processing backtraces generated in Clojure programs.

To install the library, build using <code>ant</code> and include the resulting <code>clj-backtrace.jar</code> in your classpath.

One use for clj-backtrace is it to print stack traces from the REPL:

<pre><code>
=> (use 'clj-backtrace.repl)
=> ("foo")
java.lang.ClassCastException: java.lang.String
user=> (pst)  ;instead of (.printStackTrace *e) 
java.lang.ClassCastException: java.lang.String
         Compiler.java:4163 clojure.lang.Compiler.eval
              core.clj:1497 clojure.core/eval
               main.clj:148 clojure.main/repl[fn]
               main.clj:145 clojure.main/repl
            RestFn.java:876 clojure.lang.RestFn.invoke
            repl_ln.clj:233 clojure.contrib.repl-ln/repl
            RestFn.java:402 clojure.lang.RestFn.invoke
                user.clj:71 user/eval
         Compiler.java:4152 clojure.lang.Compiler.eval
         Compiler.java:4480 clojure.lang.Compiler.load
                RT.java:327 clojure.lang.RT.loadResourceScript
                RT.java:312 clojure.lang.RT.loadResourceScript
                RT.java:308 clojure.lang.RT.maybeLoadResourceScript
                RT.java:446 clojure.lang.RT.doInit
                RT.java:286 clojure.lang.RT.<clinit>
          Namespace.java:31 clojure.lang.Namespace.<init>
         Namespace.java:116 clojure.lang.Namespace.findOrCreate
               main.java:21 clojure.main.<clinit>
           (Unknown Source) java.lang.Class.forName0
             Class.java:164 java.lang.Class.forName
      ConsoleRunner.java:69 jline.ConsoleRunner.main
Caused by: java.lang.String
                   repl-1:1 user/eval
         Compiler.java:4152 clojure.lang.Compiler.eval
</code></pre>

In stack traces printed by <code>pst</code>:
* Java methods are described with the usual <code>name.space.ClassName.methodName</code> convention and Clojure functions with their own <code>name.space/function-name</code> convention.
* Anonymous clojure functions are denoted by adding an <code>[fn]</code> to their enclosing, named function.
* "Caused by" cascades are shown as in regular java stack traces.
* Elements are vertically aligned for better readability.

The library also offers an API for processing exceptions to separate the useful information that they contain from the noise generated by the Clojure compilation process. This API is used internal for <code>pst</code> and can be used to e.g. improve development tools. Try for example:

<pre><code>
=> (use 'clj-backtrace.core)
=> (try ("foo") (catch Exception e (parse-exception e)))
</code></pre>